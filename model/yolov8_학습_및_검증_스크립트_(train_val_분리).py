# -*- coding: utf-8 -*-
"""YOLOv8 학습 및 검증 스크립트 (Train/Val 분리)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GTwD00wWTckTswWBJxy8ye1o3Mllj-3w
"""

import os
import cv2
import json
import glob
from ultralytics import YOLO

# --- 경로 설정 ---
# 데이터셋의 상위 경로 (예: 'augmented_data2' 폴더가 있는 위치)
BASE_DATASET_PATH = "C:/Users/jenni/Desktop/augmented_data2"
# YOLO 학습 결과가 저장될 경로
PROJECT_OUTPUT_PATH = "C:/Users/jenni/Desktop/YOLO_TRAIN_RESULTS2"


def convert_labelme_to_yolo_segmentation(json_dir, output_txt_dir, img_w, img_h, label_to_id_map):
    """
    Labelme JSON 파일들을 YOLO segmentation .txt 파일로 변환합니다.
    Args:
        json_dir (str): Labelme JSON 파일들이 있는 디렉토리 경로.
        output_txt_dir (str): 변환된 YOLO .txt 파일들을 저장할 디렉토리 경로.
        img_w (int): 원본 이미지의 너비.
        img_h (int): 원본 이미지의 높이.
        label_to_id_map (dict): 클래스 이름(label)을 ID(숫자)로 매핑하는 딕셔너리.
    """
    os.makedirs(output_txt_dir, exist_ok=True)
    json_files = glob.glob(os.path.join(json_dir, "*.json"))

    if not json_files:
        print(f"Warning: No JSON files found in {json_dir}. Skipping conversion for this directory.")
        return

    for json_path in json_files:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        txt_filename = os.path.basename(json_path).replace(".json", ".txt")
        txt_path = os.path.join(output_txt_dir, txt_filename)

        yolo_lines = []
        for shape in data.get('shapes', []):
            label_name = shape.get('label')
            if label_name in label_to_id_map:
                class_id = label_to_id_map[label_name]
                points = shape.get('points', [])

                normalized_points = []
                for x, y in points:
                    # 좌표를 이미지 크기에 맞춰 정규화
                    normalized_points.append(f"{(x / img_w):.6f}")
                    normalized_points.append(f"{(y / img_h):.6f}")

                if normalized_points:
                    yolo_lines.append(f"{class_id} {' '.join(normalized_points)}")
            else:
                print(f"Warning: Class '{label_name}' not found in label_to_id_map. Skipping shape in {json_path}")

        # 객체가 있든 없든 항상 .txt 파일을 생성하여 학습 안정성을 높입니다.
        with open(txt_path, 'w', encoding='utf-8') as f:
            if yolo_lines:
                f.write('\n'.join(yolo_lines))
            else:
                pass # 객체가 없는 경우 빈 파일 생성


def create_data_yaml(dataset_base_path, yaml_output_path, class_names):
    """
    YOLOv8 학습을 위한 data.yaml 파일을 생성합니다. (train/val 분리 구조)
    Args:
        dataset_base_path (str): 'train', 'val' 폴더가 있는 상위 디렉토리.
        yaml_output_path (str): 생성될 data.yaml 파일의 전체 경로.
        class_names (list): 데이터셋의 모든 클래스 이름 목록.
    """
    # YOLOv8은 data.yaml에 지정된 'path'를 기준으로 train/val 경로를 찾습니다.
    # 경로는 호환성을 위해 슬래시(/)로 변환합니다.
    path_str = dataset_base_path.replace(os.sep, '/')
    train_images_rel_path = 'train/images'
    val_images_rel_path = 'val/images'

    nc = len(class_names)

    yaml_content = f"""
# YOLOv8 Dataset Configuration File
# Paths are relative to the 'path' directory.

path: {path_str}
train: {train_images_rel_path}
val: {val_images_rel_path}

# Number of classes and names
nc: {nc}
names: {class_names}
"""
    with open(yaml_output_path, "w", encoding="utf-8") as f:
        f.write(yaml_content.strip())
    print(f"'{yaml_output_path}' file created successfully.")


def run_yolo_training(dataset_name, epochs=50):
    """
    'train'/'val' 구조의 데이터셋으로 YOLOv8 모델을 학습하고 검증합니다.
    Args:
        dataset_name (str): 'train', 'val' 폴더를 포함하는 데이터셋 폴더 이름.
                              (BASE_DATASET_PATH 아래에 위치해야 함)
        epochs (int): 학습할 에포크 수.
    """
    print(f"\n--- Starting YOLOv8 training for dataset: {dataset_name} ---")

    # 1. 경로 설정
    dataset_path = os.path.join(BASE_DATASET_PATH, dataset_name)
    train_path = os.path.join(dataset_path, "train")
    val_path = os.path.join(dataset_path, "val")

    # 필요한 폴더 존재 여부 확인
    if not (os.path.isdir(train_path) and os.path.isdir(val_path)):
        print(f"Error: 'train' and/or 'val' directory not found in '{dataset_path}'")
        return

    train_images_path = os.path.join(train_path, "images")
    train_labels_json_path = os.path.join(train_path, "labels")
    train_labels_yolo_path = os.path.join(train_path, "labels_yolo") # 변환된 YOLO 라벨 저장 위치

    val_labels_json_path = os.path.join(val_path, "labels")
    val_labels_yolo_path = os.path.join(val_path, "labels_yolo") # 변환된 YOLO 라벨 저장 위치

    # 2. 클래스 정보 로드
    label2id = {}
    id2label = {}
    try:
        with open("classes.txt", "r", encoding="utf-8") as f:
            class_names_from_file = [line.strip() for line in f if line.strip()]
        for i, name in enumerate(class_names_from_file):
            label2id[name] = i
            id2label[i] = name
        print(f"Loaded classes: {id2label}")
    except FileNotFoundError:
        print("Error: 'classes.txt' not found. Please place it in the same directory as the script.")
        return
    except Exception as e:
        print(f"Error loading classes.txt: {e}")
        return

    # 3. 이미지 크기 확인 (학습 이미지 기준)
    image_files = glob.glob(os.path.join(train_images_path, "*.jpg")) + glob.glob(os.path.join(train_images_path, "*.png"))
    if not image_files:
        print(f"Error: No images found in {train_images_path}. Cannot proceed.")
        return

    first_image_path = image_files[0]
    img_temp = cv2.imread(first_image_path)
    if img_temp is None:
        print(f"Error: Could not read image {first_image_path}. Check file integrity.")
        return
    img_h, img_w = img_temp.shape[:2]
    print(f"Detected image dimensions from training data: W={img_w}, H={img_h}")

    # 4. Labelme JSON을 YOLO .txt로 변환 (Train & Val)
    print("\nConverting training labels (JSON -> YOLO .txt)...")
    convert_labelme_to_yolo_segmentation(train_labels_json_path, train_labels_yolo_path, img_w, img_h, label2id)
    print("Converting validation labels (JSON -> YOLO .txt)...")
    convert_labelme_to_yolo_segmentation(val_labels_json_path, val_labels_yolo_path, img_w, img_h, label2id)
    print("Label conversion complete.")

    # 5. data.yaml 파일 생성
    print("\nCreating 'data.yaml' configuration file...")
    yaml_path = os.path.join(dataset_path, "data.yaml")
    create_data_yaml(dataset_path, yaml_path, list(id2label.values()))

    # 6. YOLOv8 모델 학습
    print("\nLoading YOLOv8 model and starting training...")
    model = YOLO("yolov8n-seg.pt")

    try:
        results = model.train(
            data=yaml_path,
            epochs=epochs,
            imgsz=640,
            name=f"yolov8n_seg_{dataset_name}", # 결과 폴더 이름
            project=PROJECT_OUTPUT_PATH,
            save=True,      # 모델 저장
            resume=False    # 이어서 학습 안 함
        )
        print(f"--- Training for dataset '{dataset_name}' completed. ---")

        # 7. 검증 결과 출력 (학습 시 자동으로 검증이 수행됩니다)
        if hasattr(results, 'metrics') and results.metrics:
            print("\n--- Validation Metrics ---")
            precision = results.metrics.get('metrics/precision(B)', 0.0)
            recall = results.metrics.get('metrics/recall(B)', 0.0)
            mAP50_B = results.metrics.get('metrics/mAP50(B)', 0.0)
            mAP_B = results.metrics.get('metrics/mAP50-95(B)', 0.0)
            mAP50_M = results.metrics.get('metrics/mAP50(M)', 0.0)
            mAP_M = results.metrics.get('metrics/mAP50-95(M)', 0.0)

            f1_score = 0.0
            if (precision + recall) > 0:
                f1_score = 2 * (precision * recall) / (precision + recall)

            print(f"Precision (Box): {precision:.4f}")
            print(f"Recall (Box): {recall:.4f}")
            print(f"F1-Score (Box): {f1_score:.4f}")
            print("-" * 20)
            print(f"mAP@.50 (Box): {mAP50_B:.4f}")
            print(f"mAP@.50-.95 (Box): {mAP_B:.4f}")
            print("-" * 20)
            print(f"mAP@.50 (Mask): {mAP50_M:.4f}")
            print(f"mAP@.50-.95 (Mask): {mAP_M:.4f}")
            print("------------------------")
        else:
            print("Could not retrieve validation metrics from training results.")

    except Exception as e:
        print(f"An error occurred during YOLO training for dataset '{dataset_name}': {e}")


# --- 스크립트 실행 ---
if __name__ == "__main__":
    # 학습을 진행할 데이터셋 폴더 이름을 지정합니다.
    # 예: BASE_DATASET_PATH가 "C:/.../augmented_data3"이고,
    # 그 안에 "my_dataset" 폴더가 있으며,
    # "my_dataset" 안에 "train", "val" 폴더가 있다면 "my_dataset"을 입력합니다.
    # 제공해주신 스크린샷 기준으로 폴더 이름이 없다면 새로 만드셔야 합니다.
    # 예를 들어, augmented_data3 안에 'dataset1' 폴더를 만들고 그 안에 train, val을 넣었다면
    # target_dataset = "dataset1" 로 설정합니다.
    target_dataset = "train" # ⚠️ 실제 데이터셋 폴더 이름으로 변경해주세요.

    # 에포크 수 설정
    num_epochs = 5

    run_yolo_training(target_dataset, epochs=num_epochs)

    print("\nAll training processes finished.")